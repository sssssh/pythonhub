*  Installation pip
 pip is already installed if you are using Python2>=2.7.9
 or Python3>=3.4 downloaded from python.org.
 
 ;; securly download get-pip.py
 curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
 ;; inspect get-pip.py for any malevolence
 python get-pip.py

 ;; get-pip.py options
 --no-setuptools
 --no-wheel
 
 ;; install from local copies of pip and setuptools
 python get-pip.py --no-index --find-links=/local/copies

 ;; install to the user site
 python get-pip.py --user

 ;; install behind a proxy
 python get-pip.py --proxy="http://[user:passwd@]proxy.server:port"

 ;; Upgrading pip
 pip install -U pipg
*  关于指定HTTP代理
 
 指定pip的代理
 $ pip --proxy=proxy.example.com:1234 install requests
 指定pip的认证代理
 $ pip --proxy=beproud:passwd@proxy.example.com:1234 install requests
 在PIP_PROXY环境变量中指定
 $ export PIP PROXY=proxy.example.com:1234
 $ pip install requests
 在HTTP_PROXY环境变量中指定
 $ export HTTP_PROXY=proxy.example.com:1234
 $ pip install requests
*  pip install

 从源码包安装
 $ pip install ./logfilter-0.9.2

 指定editable安装源码目录
 $ pip install -e ./logfilter-0.9.2

 用-U选项更新版本
 $ pip install -U requests

 指定下载缓存
 $ pip install --download-cache=~/.pip-cache requests

 在环境变量中设置下载缓存
 $ export PIP_DOWNLOAD_CACHE=~/.pip-cache
 $ pip install requests
 
 pip supports installing from PyPI,version control,local projects,
 and directly from distribution files.

 ;; Install SomePackage and its dependencies from PyPI using Requirement Specifiers
 $ pip install SomePackage  # latest version
 $ pip install SomePackage==1.0.4  # specific version
 $ pip install 'SomePackage>=1.0.4'  # minimum version

 ;; Install a list of Requirements specified in a file.
 $ pip install -r requirements.txt

 ;; Upgrade an already installed SomePackage to the latest from PyPI
 $ pip install --upgrade SomePackage

 ;; Install a local project in "editable" mode
 $ pip install -e .  # project in current directory
 $ pip install -e path/to/project

 ;; Install a project from VCS in "editable" mode.
 $ pip install -e git+https://git.repo/some_pkg.git#egg=SomePackage  # from git
 $ pip install -e hg++https://hg.repo/some_pkg.git#egg=SomePackage  # from mercurial
 $ pip install -e svn+svn://svn.repo/some_pkg/trunk/#egg=SomePackage  # from svn
 $ pip install -e git+https://git.repo/some_pkg.git@feature#egg=SomePackage  # from 'feature' branch
 $ pip install -e "git+https://git.repo/some_repo.git#egg=subdir&subdirectory=subdir_path"  # install a python package from a repo subdirectory
 
 ;; Install a package with setuptools extras
 $ pip install SomePackage[PDF]
 $ pip install git+https://git.repo/some_pkg.git#egg=SomePackage[PDF]
 $ pip install SomePackage[PDF]==3.0
 $ pip install -e .[PDF]==3.0  # editable project in current directory
 $ pip install SomePackage[PDF,EPUB]  # multiple extras

 ;; Install a particular source archive file
 $ pip install ./downloads/SomePackage-1.0.4.tar.gz
 $ pip install http://my.package.repo/SomePackage-1.0.4.zip

 ;; Install from a different index, and not PyPI
 $ pip install --index-url http://my.package.repo/simple/ SomePackage

 ;; Search an additional index during install, in addition to PyPI
 pip install --extra-index-url http://my.package.repo/simple SomePackage

 ;; Install from a local flat directory containing archives (and don't scan indexes)
 $ pip install --no-index --find-links=file://local/dir/ SomePackage
 $ pip install --no-index --find-links=/loacl/dir/ SomePackage
 $ pip install --no-index --find-links=relative/dir/ SomePackage

 ;; Find pre-release and development versions,in addition to stable versions
 $ pip install --pre SomePackage
*  pip download
 
 ;; download a package and all of its dependencies
 $ pip download SomePackage
 $ pip download -d . SomePackage  # equivalent to above
 $ pip download --no-index --find-links=/tmp/wheelhouse -d /tmp/otherwheelhouse SomePackage
 
 ;; download a package and all of its dependencies with OSX specific interpreter constraints
 $ pip download \
     --only-binary=:all:
     --platform macosx-10_10_x86_64 \
     --python-version 27 \
     --implementation cp \
     SomePackage

 ;; download a package and its dependencies with linux specific constrains.
 $ pip download \
     --only-binary=:all: \
     --platform linux_x86_64 \
     --python-version 3 \
     --implementation cp \
     --abi cp34m \
     SomePackage

 ;; force platform, implementation, and abi agnostic deps
 $ pip download \
     --only-binary=:all: \
     --platform any \
     --python-version 3 \
     --implementation py \
     --abi none \
     SomePackage

 ;; even when overconstrained, this will still correctly fetch the pip universal wheel.
 $ pip download \
     --only-binary=:all: \
     --platform linux_x86_64 \
     --python-version 33 \
     --implementation cp \
     --abi cp34m \
     pip>=8
*  pip uninstall
 
 $ pip uninstall [options] <package>
 $ pip uninstall [options] -r <requirements file>
*  pip freeze

 $ pip freeze
 $ pip freeze > requirements.txt
*  pip list

 $ pip list
 
 ;; list outdated packages(excluding editables), and the latest version available.
 $ pip list --outdated

 ;; list installed packages with column formatting.
 pip list --format columns

 ;; list outdated packages with column formatting.
 pip list -o --format columns

 ;; list packages that are not dependencies of other package
 ;; can be combined with other options
 $ pip list --outdated --not-required

 ;; use legacy formatting
 $ pip list --format=legacy

 ;; use json formatting 
 pip list --format=json

 ;; use freeze formatting
 $ pip list --format=freeze

*  pip show
 
 ;; show information about a package
 $ pip show sphinx

 ;; show all information about a package
 $ pip show --verbose sphinx
*  pip search
 
 pip search peppercorn

*  pip check
 verify installed packages have compatible dependencies.
 
 $ pip check
 
 $ echo $?
*  pip config 

 $ pip config [<file-option>] list
 $ pip config [<file-option>] [--editor <editor-path>] edit
 $ pip config [<file-option>] get name
 $ pip config [<file-option>] set name value
 $ pip config [<file-option>] unset name

*  pip wheel

 $ pip wheel --wheel-dir=/tmp/wheelhouse SomePackage
 $ pip install --no-index --find-links=/tmp/wheelhouse SomePackage
*  pip hash

 $ pip hash ./pip_downloads/SomePackage-2.2.tar.gz
    ./pip_downloads/SomePackage-2.2.tar.gz:
    --hash=sha256:93e62e05c7ad3da1a233def6731e8285156701e3419a5fe279017c429ec67ce0

